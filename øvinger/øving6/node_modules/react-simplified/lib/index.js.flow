// @flow

/**
 * A React component with simplified usage.
 */
declare export class Component<Props = {}, State = void>
  extends React$Component<Props & { children?: React$Node }, State>
{
  /**
   * Returns the last instance.
   */
  static instance(): ?this;

  /**
   * Returns all instances.
   */
  static instances(): this[];

  /**
   * Replacement-hook for componentDidMount.
   */
  mounted(): mixed;

  /**
   * Replacement-hook for componentDidUpdate.
   */
  updated(prevProps: Props, prevState: State, prevContext: any): mixed;

  /**
   * Replacement-hook for componentWillUnmount.
   */
  beforeUnmount(): mixed;
}

/**
 * Create an object that when altered, schedules rerender of affected React Simplified components.
 */
declare export function sharedComponentData<Observable: interface {}>(
  object?: Observable
): Observable;

// In case one needs the observe and unobserve functions from @nx-js/observer-util

/**
 * Scheduler type for the ObserveOptions type.
 */
declare type Scheduler = {
  add: () => mixed,
  delete: () => mixed,
};

/**
 * Options type for the observe function.
 */
declare type ObserveOptions = {
  scheduler?: Scheduler | (() => mixed),
  debugger?: () => mixed,
  lazy?: boolean,
};

/**
 * Calls func whenever a used (within func) state of a sharedComponentData object is changed.
 */
declare export function observe<Reaction: () => mixed>(
  func: Reaction,
  options?: ObserveOptions
): Reaction;

/**
 * Stops the given observe object's function.
 */
declare export function unobserve(func: () => mixed): void;
